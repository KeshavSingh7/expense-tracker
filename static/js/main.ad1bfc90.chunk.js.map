{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/Balance.js","components/IncomeExpenses.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","App.js","reportWebVitals.js","index.js"],"names":["Header","AppReducer","state","action","type","transactions","filter","transaction","id","payload","initialState","text","amount","GlobalContext","createContext","GlobalProvider","children","useReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","useContext","balance","forEach","parseInt","toFixed","IncomeExpenses","income","expenses","className","Math","abs","Transaction","sign","onClick","TransactionList","map","AddTransaction","useState","setText","setAmmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAEaA,EAAS,WAClB,OACI,kD,qBCaOC,EAjBI,SAACC,EAAOC,GACvB,OAAOA,EAAOC,MACV,IAAK,qBACD,OAAO,2BACAF,GADP,IAEIG,aAAcH,EAAMG,aAAaC,QAAO,SAAAC,GAAW,OAAIA,EAAYC,KAAOL,EAAOM,aAEzF,IAAK,kBACD,OAAO,2BACAP,GADP,IAEIG,aAAa,CAAEF,EAAOM,SAAV,mBAAsBP,EAAMG,iBAEhD,QACI,OAAOH,ICVbQ,EAAe,CACjBL,aAAe,CACX,CAAEG,GAAI,EAAGG,KAAM,SAAUC,OAAQ,OAI5BC,EAAgBC,wBAAcJ,GAE9BK,EAAiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC7B,EAA0BC,qBAAWhB,EAAYS,GAAjD,mBAAOR,EAAP,KAAcgB,EAAd,KAgBA,OACI,cAACL,EAAcM,SAAf,CAAwBC,MAAO,CACvBf,aAAcH,EAAMG,aACpBgB,kBAjBZ,SAA2Bb,GACvBU,EAAS,CACLd,KAAM,qBACNK,QAASD,KAeLc,eAXZ,SAAwBf,GACpBW,EAAS,CACLd,KAAM,kBACNK,QAASF,MAKb,SAKMS,KC/BDO,EAAU,WACnB,IAAQlB,EAAiBmB,qBAAWX,GAA5BR,aACJoB,EAAU,EAKd,OAJApB,EAAaqB,SAAQ,SAAAnB,GACjBkB,GAAWE,SAASpB,EAAYK,OAAOgB,QAAQ,OAI/C,mCACI,iDAAmB,uBAAMpB,GAAG,UAAT,iBAAwBiB,WCT1CI,EAAiB,WAC1B,IAAQxB,EAAiBmB,qBAAWX,GAA5BR,aACJyB,EAAS,EAAGC,EAAW,EAS3B,OARA1B,EAAaqB,SAAQ,SAACnB,GAClB,IAAMK,EAASe,SAASpB,EAAYK,OAAOgB,QAAQ,IAChDhB,EAAS,EACRkB,GAAUlB,EAEVmB,GAAYnB,KAIhB,sBAAKoB,UAAU,oBAAf,UACI,gCACI,wCACA,oBAAGxB,GAAG,SAASwB,UAAU,aAAzB,kBAA4CF,QAEhD,gCACI,0CACA,oBAAGtB,GAAG,QAAQwB,UAAU,cAAxB,kBAA4CC,KAAKC,IAAIH,aClBxDI,EAAc,SAAC,GAAqB,IAAnB5B,EAAkB,EAAlBA,YAClBc,EAAsBG,qBAAWX,GAAjCQ,kBAEFe,EAAO7B,EAAYK,OAAS,EAAI,IAAM,IACtCoB,EAAqB,MAATI,EAAe,QAAU,OAE3C,OACI,qBAAIJ,UAAWA,EAAf,UACKzB,EAAYI,KADjB,IACuB,iCAAOyB,EAAP,OAAiBH,KAAKC,IAAI3B,EAAYK,QAAQgB,QAAQ,MAAU,wBAAQI,UAAU,aAAaK,QAAS,kBAAMhB,EAAkBd,EAAYC,KAA5E,iBADxDD,EAAYC,KCPtC8B,EAAkB,WAC3B,IAAQjC,EAAiBmB,qBAAWX,GAA5BR,aAER,OACI,qCACI,yCACA,oBAAIG,GAAG,WAAWwB,UAAU,OAA5B,SAEI3B,EAAakC,KAAI,SAAAhC,GACb,OACI,cAAC,EAAD,CAAkCA,YAAaA,GAA7BA,EAAYC,aCXzCgC,EAAiB,WAC1B,MAAwBC,mBAAS,IAAjC,mBAAO9B,EAAP,KAAa+B,EAAb,KACA,EAA6BD,mBAAS,GAAtC,mBAAO7B,EAAP,KAAe+B,EAAf,KAEQrB,EAAmBE,qBAAWX,GAA9BS,eAWR,OACI,qCACI,qDACA,uBAAMsB,SAbG,SAACC,GACdA,EAAEC,iBACF,IAAMC,EAAiB,CACnBvC,GAAKyB,KAAKe,MAAsB,IAAhBf,KAAKgB,UACrBtC,OACAC,QAAUA,GAEdU,EAAeyB,IAMX,UACI,sBAAKf,UAAU,eAAf,UACI,uBAAOkB,QAAQ,OAAf,kBACA,uBAAO9C,KAAK,OAAOgB,MAAOT,EAAMwC,SAAU,SAACN,GAAD,OAAOH,EAAQG,EAAEO,OAAOhC,QAAQZ,GAAG,OAAO6C,YAAY,wBAEpG,sBAAKrB,UAAU,eAAf,UACI,wBAAOkB,QAAQ,SAAf,oBACW,uBADX,8CAIA,uBAAO9C,KAAK,SAASgB,MAAOR,EAAQuC,SAAU,SAACN,GAAD,OAAOF,EAAWE,EAAEO,OAAOhC,aAE7E,8BACI,wBAAQY,UAAU,MAAlB,sCCXLsB,MAdf,WACE,OACE,eAAC,EAAD,WACE,cAAC,EAAD,IACA,sBAAKtB,UAAU,YAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,WCLOuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ad1bfc90.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <h1>\r\n           EXPENSE TRACKER\r\n        </h1>\r\n    )\r\n}\r\n","const AppReducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'DELETE_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transactions: state.transactions.filter(transaction => transaction.id !== action.payload)\r\n            }\r\n        case 'ADD_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transactions: [action.payload, ...state.transactions]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default AppReducer;","import React, { createContext, useReducer } from 'react';\r\nimport AppReducer from './AppReducer';\r\n\r\nconst initialState = {\r\n    transactions:  [\r\n        { id: 1, text: 'Salary', amount: 20000.00 }\r\n    ]\r\n}\r\n\r\nexport const GlobalContext = createContext(initialState);\r\n\r\nexport const GlobalProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n    function deleteTransaction(id) {\r\n        dispatch({\r\n            type: 'DELETE_TRANSACTION',\r\n            payload: id\r\n        });\r\n    }\r\n\r\n    function addTransaction(transaction) {\r\n        dispatch({\r\n            type: 'ADD_TRANSACTION',\r\n            payload: transaction\r\n        });\r\n    }\r\n\r\n    return (\r\n        <GlobalContext.Provider value={{\r\n                transactions: state.transactions,\r\n                deleteTransaction,\r\n                addTransaction\r\n            }}>\r\n            { children }\r\n        </GlobalContext.Provider>\r\n    )\r\n}","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const Balance = () => {\r\n    const { transactions } = useContext(GlobalContext);\r\n    let balance = 0;\r\n    transactions.forEach(transaction => {\r\n        balance += parseInt(transaction.amount.toFixed(2));\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <h3>YOUR BALANCE - <span id=\"balance\">Rs. {balance}</span></h3>\r\n        </>\r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const IncomeExpenses = () => {\r\n    const { transactions } = useContext(GlobalContext);\r\n    let income = 0, expenses = 0;\r\n    transactions.forEach((transaction) => {\r\n        const amount = parseInt(transaction.amount.toFixed(2));\r\n        if(amount > 0)\r\n            income += amount;\r\n        else\r\n            expenses += amount; \r\n    }); \r\n\r\n    return (\r\n        <div className=\"inc-exp-container\">\r\n            <div>\r\n                <h4>INCOME</h4>\r\n                <p id=\"credit\" className=\"money-plus\">+Rs. {income}</p>\r\n            </div>\r\n            <div>\r\n                <h4>EXPENSES</h4>\r\n                <p id=\"debit\" className=\"money-minus\">-Rs. {Math.abs(expenses)}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\n\r\nexport const Transaction = ({ transaction }) => {\r\n    const { deleteTransaction } = useContext(GlobalContext);\r\n\r\n    const sign = transaction.amount < 0 ? '-' : '+';\r\n    const className = sign === '-' ? 'minus' : 'plus';\r\n\r\n    return (\r\n        <li className={className} key={transaction.id}>\r\n            {transaction.text} <span>{sign}Rs. {Math.abs(transaction.amount).toFixed(2)}</span><button className=\"delete-btn\" onClick={() => deleteTransaction(transaction.id)} >X</button>\r\n        </li>\r\n    )\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport { Transaction } from './Transaction';\r\n\r\nexport const TransactionList = () => {\r\n    const { transactions } = useContext(GlobalContext);\r\n    \r\n    return (\r\n        <>\r\n            <h4>HISTORY</h4>\r\n            <ul id=\"passbook\" className=\"list\">\r\n            {\r\n                transactions.map(transaction => {\r\n                    return (\r\n                        <Transaction key={transaction.id} transaction={transaction} />\r\n                    )\r\n                })\r\n            }\r\n            </ul>   \r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const AddTransaction = () => {\r\n    const [text, setText] = useState('');\r\n    const [amount, setAmmount] = useState(0);\r\n\r\n    const { addTransaction } = useContext(GlobalContext);\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const newTransaction = {\r\n            id : Math.floor(Math.random() * 1000000),\r\n            text,\r\n            amount : +amount\r\n        }\r\n        addTransaction(newTransaction);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h4>ADD NEW TRANSACTION</h4>\r\n            <form onSubmit={onSubmit}>\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"text\">Text</label>\r\n                    <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} id=\"text\" placeholder=\"Enter Text .....\"  />\r\n                </div>\r\n                <div className=\"from-control\">\r\n                    <label htmlFor=\"amount\">\r\n                        Amount <br />\r\n                        (negative - expense | positive - income)\r\n                    </label>\r\n                    <input type=\"number\" value={amount} onChange={(e) => setAmmount(e.target.value)} />\r\n                </div>\r\n                <div>\r\n                    <button className=\"btn\">Add Transaction</button>\r\n                </div>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { Header } from './components/Header';\nimport { Balance } from './components/Balance';\nimport { IncomeExpenses } from './components/IncomeExpenses';\nimport { TransactionList } from './components/TransactionList';\nimport { AddTransaction } from './components/AddTransaction';\nimport { GlobalProvider } from './context/GlobalState';\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className=\"container\">\n        <Balance />\n        <IncomeExpenses />\n        <TransactionList />\n        <AddTransaction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}